apply plugin: "java"
apply plugin: "kotlin"

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.kotlin.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.polymorph.game.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/data")
project.ext.distDir = new File("./build/libs")
project.ext.distAssetsDir = new File("./build/libs/data")

kotlin {
    experimental {
        coroutines 'enable'
    }
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    args '-root', '../'
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task tidy(type: Delete) {
    delete project.ext.distAssetsDir.toString()
}

task copyData(type: Copy) {
    from files(project.assetsDir)
    into project.distAssetsDir
}

//copyData.dependsOn tidy

task dist(type: Jar) {
    baseName = "ProjectPolymorph"
    classifier = "Alpha"
    version = 0.1

    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes
dist.dependsOn copyData

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
